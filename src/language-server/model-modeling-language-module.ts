import {
    createDefaultModule,
    createDefaultSharedModule,
    DefaultSharedModuleContext,
    inject,
    LangiumServices,
    LangiumSharedServices,
    Module,
    PartialLangiumServices
} from 'langium';
import {ModelModelingLanguageGeneratedModule, ModelModelingLanguageGeneratedSharedModule} from './generated/module';
import {ModelModelingLanguageValidator, registerValidationChecks} from './model-modeling-language-validator';
import {ModelModelingLanguageScopeComputation} from "./model-modeling-language-scope-computation";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ModelModelingLanguageAddedServices = {
    validation: {
        ModelModelingLanguageValidator: ModelModelingLanguageValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ModelModelingLanguageServices = LangiumServices & ModelModelingLanguageAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const ModelModelingLanguageModule: Module<ModelModelingLanguageServices, PartialLangiumServices & ModelModelingLanguageAddedServices> = {
    validation: {
        ModelModelingLanguageValidator: () => new ModelModelingLanguageValidator()
    },
    references: {
        ScopeComputation: (services) => new ModelModelingLanguageScopeComputation(services)
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createModelModelingLanguageServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    ModelModelingLanguage: ModelModelingLanguageServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        ModelModelingLanguageGeneratedSharedModule
    );
    const ModelModelingLanguage = inject(
        createDefaultModule({shared}),
        ModelModelingLanguageGeneratedModule,
        ModelModelingLanguageModule
    );
    shared.ServiceRegistry.register(ModelModelingLanguage);
    registerValidationChecks(ModelModelingLanguage);
    return {shared, ModelModelingLanguage};
}
