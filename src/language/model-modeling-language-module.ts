import type {
    DefaultSharedModuleContext,
    LangiumServices,
    LangiumSharedServices,
    Module,
    PartialLangiumServices
} from 'langium';
import {createDefaultModule, createDefaultSharedModule, inject} from 'langium';
import {ModelModelingLanguageGeneratedModule, ModelModelingLanguageGeneratedSharedModule} from './generated/module.js';
import {ModelModelingLanguageValidator, registerValidationChecks} from './model-modeling-language-validator.js';
import {ModelModelingLanguageScopeComputation} from "./model-modeling-language-scope-computation.js";
import {ModelModelingLanguageScopeProvider} from "./model-modeling-language-scope-provider.js";
import {ModelModelingLanguageSemanticTokenProvider} from "./model-modeling-language-semantic-token-provider.js";
import {ModelModelingLanguageCodeActionProvider} from "./model-modeling-language-code-action-provider.js";
import {ModelModelingLanguageFormatter} from "./model-modeling-language-formatter.js";
import {ModelModelingLanguageCompletionProvider} from "./model-modeling-language-completion-provider.js";

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ModelModelingLanguageAddedServices = {
    validation: {
        ModelModelingLanguageValidator: ModelModelingLanguageValidator
    },
    references: {
        ScopeComputation: ModelModelingLanguageScopeComputation,
        ScopeProvider: ModelModelingLanguageScopeProvider,
    },
    lsp: {
        SemanticTokenProvider: ModelModelingLanguageSemanticTokenProvider,
        CodeActionProvider: ModelModelingLanguageCodeActionProvider,
        Formatter: ModelModelingLanguageFormatter,
        CompletionProvider: ModelModelingLanguageCompletionProvider
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ModelModelingLanguageServices = LangiumServices & ModelModelingLanguageAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const ModelModelingLanguageModule: Module<ModelModelingLanguageServices, PartialLangiumServices & ModelModelingLanguageAddedServices> = {
    validation: {
        ModelModelingLanguageValidator: (services) => new ModelModelingLanguageValidator(services),
    },
    references: {
        ScopeComputation: (services) => new ModelModelingLanguageScopeComputation(services),
        ScopeProvider: (services) => new ModelModelingLanguageScopeProvider(services),
    },
    lsp: {
        SemanticTokenProvider: (services) => new ModelModelingLanguageSemanticTokenProvider(services),
        CodeActionProvider: (services) => new ModelModelingLanguageCodeActionProvider(services),
        Formatter: () => new ModelModelingLanguageFormatter(),
        CompletionProvider: (services) => new ModelModelingLanguageCompletionProvider(services)
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createModelModelingLanguageServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    MmlServices: ModelModelingLanguageServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        ModelModelingLanguageGeneratedSharedModule
    );
    const MmlServices = inject(
        createDefaultModule({shared}),
        ModelModelingLanguageGeneratedModule,
        ModelModelingLanguageModule
    );
    shared.ServiceRegistry.register(MmlServices);
    registerValidationChecks(MmlServices);
    return {shared, MmlServices};
}
